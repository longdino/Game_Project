var phasor = function(host) {

	var mongodb = require('mongodb');
	var Db = mongodb.Db;
	var Server = mongodb.Server;
    var async = require('async');
    
    var self = this; 
    self.queue = [];
    self.database = 'undefined';
    
    Db.connect(host, function(err, database) {

      if (err ) console.log(err);
      else {
        console.log('connected to databases');
        self.database = database;
        for(var i =0; i< self.queue.length; i++){
           self.q.push(self.queue[i].collectionName, self.queue[i].callback);
        }   
        self.queue = [];
      }
	
    });

    self.q = async.queue(function (collectionName, callback) {
        console.log('processing for: ' + collectionName);
        self.getCol(collectionName, callback);
    }, 1);

    self.query = function(collectionName, callback){
      if(self.database === 'undefined'){
         self.queue.push({'collectionName':collectionName, 'callback':callback});    
      }
      else{
         self.q.push(collectionName, callback);    
      }
    };
    
    self.getCol = function(collectionName, callback){
       var collection = self.database.collection(collectionName);
       callback(collection);
    };
    
    this.createCollection = function(collectionName){
       self.query(collectionName, function(collection){
          if(!collection) console.log('error getting collection');
          else{  
             collection.insert({'initialised on': new Date()}, function(err, data){
               if(err) console.log('error initialising collection');
               else console.log('created collection: ' + collectionName);    
             }); 
          }
       });    
    };
    
    this.insert = function(collectionName, data, callback){
      self.query(collectionName, function(collection){
         collection.save(data,{safe:true}, function(err, data){
           if(err) console.log(err);
           else{ console.log('saved: '+ data);
             if(callback) callback(data);
           }
         });    
      });        
    } ;   
    
    this.find = function(collectionName, selector, callback){
      self.query(collectionName, function(collection){
         collection.findOne(selector, function(err, data){
           if(err) console.log(err);
           else if(callback) callback(data);
           else {
               console.log('reading data');
               for ( var i in data) 
                  console.log(data[i]);
            }
         });    
      });    
    };
    
    this.findAll = function(collectionName, selector, callback){
      self.query(collectionName, function(collection){
         collection.find(selector).toArray(function(err, data){
           if(err) console.log(err);
           else if(callback) callback(data);
           else {
               console.log('reading data');
               for ( var i in data) 
                  console.log(data[i]);
            }
         });    
      });    
    };
    
    this.update = function(collectionName, selector, data, callback){
      self.query(collectionName, function(collection){
         collection.update(selector, data, {safe:true}, function(err, data){
           if(err) console.log(err);
           else{
               console.log('data updated');
               if (callback) callback();
           }
         });    
      });     
    };
    
    this.remove = function(collectionName, selector, callback){
      self.query(collectionName, function(collection){
         if(selector === 'all'){
            collection.remove({}, {safe:true}, function(err, data){
             if(err) console.log(err);
              else{ 
                console.log('data removed');
                callback();
              }
            });
         }
         else{
            collection.remove(selector, {safe:true}, function(err, data){
              if(err) console.log(err);
              else{ 
                console.log('data removed');
                callback();
              }
            }); 
         }    
      });     
    };  
};
exports.phasor = phasor;